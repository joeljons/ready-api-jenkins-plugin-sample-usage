<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="f73b7c9a-2e8c-402e-a4a7-5bf65ea8dbef" activeEnvironment="Default environment" name="Spotify" resourceRoot="" soapui-version="6.0.0" xmlns:con="http://eviware.com/soapui/config">
  <con:restMockService id="73be29e4-519b-406f-8d86-66c02dce9b64" port="8080" path="/" host="localhost" name="Track Lookup">
    <con:settings/>
    <con:properties/>
    <con:constraints>
      <con:congestion>0</con:congestion>
      <con:inputBandwidth>125</con:inputBandwidth>
      <con:outputBandwidth>125</con:outputBandwidth>
      <con:maxThreadPoolCapacity>20</con:maxThreadPoolCapacity>
      <con:coreThreadPoolCapacity>5</con:coreThreadPoolCapacity>
      <con:virtError>
        <con:start>-1</con:start>
      </con:virtError>
    </con:constraints>
    <con:restMockAction name="/lookup/1/.json" method="GET" resourcePath="/lookup/1/.json" id="d610c8d3-1713-4482-843e-90819aa026f6">
      <con:settings/>
      <con:dispatchStyle>SEQUENCE</con:dispatchStyle>
      <con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/</con:dispatchPath>
      <con:response name="Response 1" id="cb937155-9f47-4b2d-9637-32dc8be99b2b" httpResponseStatus="200" mediaType="application/json" encoding="utf-8">
        <con:settings/>
        <con:responseContent>{
   "track":    {
      "available": true,
      "album":       {
         "released": "2012",
         "href": "spotify:album:5Mwdhd4wgy7sSiJTAm3aga",
         "name": "Snälla TV plz"
      },
      "name": "Nytt golv",
      "popularity": "0.19000",
      "external-ids": [      {
         "type": "isrc",
         "id": "SE2UI1201203"
      }],
      "length": 172.906,
      "href": "spotify:track:7JIuSd9aMu0bDd57820sFV",
      "artists": [      {
         "href": "spotify:artist:4TzSCfS4LS5SVChh2AB2wH",
         "name": "Slagsmålsklubben"
      }],
      "availability": {"territories": "DK FI NO SE"},
      "track-number": "4"
   },
   "info": {"type": "track"}
}</con:responseContent>
        <con:header>
          <con:name>Date</con:name>
          <con:value>Thu, 13 Nov 2014 09:19:31 GMT</con:value>
        </con:header>
        <con:header>
          <con:name>Vary</con:name>
          <con:value>Accept-Encoding</con:value>
        </con:header>
        <con:header>
          <con:name>Vary</con:name>
          <con:value>Accept-Encoding</con:value>
        </con:header>
        <con:header>
          <con:name>Vary</con:name>
          <con:value>Accept-Charset</con:value>
        </con:header>
        <con:header>
          <con:name>Access-Control-Allow-Origin</con:name>
          <con:value>*</con:value>
        </con:header>
        <con:header>
          <con:name>Expires</con:name>
          <con:value>Fri, 14 Nov 2014 09:19:31 GMT</con:value>
        </con:header>
        <con:header>
          <con:name>Last-Modified</con:name>
          <con:value>Wed, 12 Nov 2014 18:00:03 GMT</con:value>
        </con:header>
        <con:header>
          <con:name>Keep-Alive</con:name>
          <con:value>timeout=10</con:value>
        </con:header>
        <con:header>
          <con:name>Etag</con:name>
          <con:value>1415815203</con:value>
        </con:header>
        <con:header>
          <con:name>Connection</con:name>
          <con:value>keep-alive</con:value>
        </con:header>
        <con:header>
          <con:name>Server</con:name>
          <con:value>nginx</con:value>
        </con:header>
      </con:response>
    </con:restMockAction>
  </con:restMockService>
  <con:properties/>
  <con:wssContainer/>
  <con:databaseConnectionContainer/>
  <con:oAuth2ProfileContainer/>
</con:soapui-project>